name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          # Создаем .env с правильными переменными для PostgreSQL
          cat << EOF > .env
          POSTGRES_DB=${{ secrets.DB_NAME }}
          POSTGRES_USER=${{ secrets.DB_USER }}
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DB_HOST=db
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          EOF
          
          # Проверяем создание файла
          echo "Created .env file with contents:"
          cat .env | grep -v PASSWORD

      - name: Build images
        run: docker compose build

      - name: Start dependent services
        run: |
          # Явно указываем использовать .env файл
          docker compose --env-file .env up -d db redis

      - name: Verify environment variables
        run: |
          echo "Checking environment variables in db container:"
          docker compose exec db printenv POSTGRES_USER POSTGRES_DB

      - name: Wait for database to be ready
        run: |
          DB_CONTAINER_ID=$(docker compose ps -q db)
          echo "Database container ID: $DB_CONTAINER_ID"
          
          echo "Waiting for PostgreSQL to be ready..."
          COUNTER=0
          until docker compose exec db pg_isready -U ${{ secrets.DB_USER }}; do
            sleep 2
            COUNTER=$((COUNTER+1))
            if [ $COUNTER -gt 15 ]; then
              echo "Database never became ready!"
              docker compose logs db
              exit 1
            fi
            echo "Attempt $COUNTER: Waiting for database..."
          done
          echo "Database is ready!"

      - name: Run migrations
        run: docker compose run --rm web python manage.py migrate

      - name: Run tests
        run: docker compose run --rm web pytest

      - name: Shutdown all services
        if: always()
        run: docker compose down -v