name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 1. Создаем .env файл ПРАВИЛЬНО
      - name: Create .env file
        run: |
          # Удаляем старый .env если есть
          rm -f .env
          
          # Создаем новый с правильными правами
          cat <<EOF > .env
          POSTGRES_DB=${{ secrets.DB_NAME }}
          POSTGRES_USER=${{ secrets.DB_USER }}
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DB_HOST=db
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          EOF
          
          # Проверяем
          echo "Содержимое .env:"
          cat .env | grep -v PASSWORD

      # 2. Явно указываем использование .env
      - name: Build images with environment
        run: docker compose --env-file .env build

      # 3. Запускаем сервисы с принудительной пересборкой
      - name: Start services with force-recreate
        run: docker compose --env-file .env up -d --force-recreate db redis

      # 4. Проверяем переменные в контейнере
      - name: Verify PostgreSQL environment
        run: |
          echo "Проверка переменных в контейнере db:"
          docker compose exec db sh -c 'echo "POSTGRES_USER: $POSTGRES_USER"'
          docker compose exec db sh -c 'echo "POSTGRES_DB: $POSTGRES_DB"'
          
      # 5. Дополнительная проверка логов
      - name: View database logs
        run: docker compose logs db